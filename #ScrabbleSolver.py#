"""
Version 1.0 brute force super inefficient implementation 
in terms of time and space complexity
Mike Xie
Reads in a list of legal words, a .txt with 
one word per line and 
and a set of 7 letters (rack) and returns all 
possible words that can be constructed 
from that set and the
base scores for those words

ex: python ScrabbleSolver.py sowpods.txt QXZYFUT
['FUTZ','FY','TUX','UT','XU','YU','YUFT','YUTZ']

"""
from sys import argv # need to put arguments somewhere
script, filename, rack  = argv

dictionaryFile = open(filename, 'r') # is a file of some sort
# Scores
scores = {"a": 1, "c": 3, "b": 3, "e": 1, "d": 2, "g": 2,
         "f": 4, "i": 1, "h": 4, "k": 5, "j": 8, "m": 3,
         "l": 1, "o": 1, "n": 1, "q": 10, "p": 3, "s": 1,
         "r": 1, "u": 1, "t": 1, "w": 4, "v": 4, "y": 4,
         "x": 8, "z": 10}

# takes a file object returns an array 
# this has O(n) space complexity because we store all of the words 
# and is totally not necessary
# we can get to O(1) if we just read from txt directly
# next implementation
def dictToList(aDictionary):
	wordList = []
	for word in aDictionary:
		word = word.rstrip().upper()
		wordList.append(word)
	return wordList

def validPlays(aWordList, aRack):
	validPlayList = []
	for word in aWordList:
		if validWordCheck(aRack, word):
			validPlayList.append(word)
	return validPlayList		

def validWordCheck(aRack, aWord): # returns a boolean for if the rack can make the word     
        tempRack = list(aRack)
        valid = True
        for letter in aWord:
                if letter not in tempRack:
                        valid = False
                else:
                        tempRack.remove(letter)
        return valid           
def test():
    assert validWordCheck("BAGELS", "BAGEL")
    assert not validWordCheck("BAGEL", "BAGELS")
    assert not validWordCheck("EEEE", "EEEEE")
    assert not validWordCheck("XQZF", "FERDXN")
    assert not validWordCheck("", "A")
    wordList = ["BAGELS","EEEE", "DOG", "BAG","12345"]
    rack = "BAGELSEEE"
    rack2 = "BAGELDO"
    print validPlays(wordList, rack)
    print validPlays(wordList, rack2)
    print dictToList(dictionaryFile)

wordList = dictToList(dictionaryFile)
print validPlays(wordList, rack)
